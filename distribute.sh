#!/bin/bash

# Gizli Distribution Script
# Builds and packages the app for all platforms

set -e  # Exit on any error

echo "üöÄ Starting Gizli distribution build..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Create releases directory
echo -e "${BLUE}üìÅ Creating releases directory...${NC}"
mkdir -p releases

# Get current date for versioning
DATE=$(date +%Y%m%d)
VERSION=$(node -p "require('./package.json').version")

echo -e "${BLUE}üì¶ Building version ${VERSION} (${DATE})${NC}"

# Build web assets
echo -e "${BLUE}üåê Building web assets...${NC}"
npm run build

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Web build successful${NC}"
else
    echo -e "${RED}‚ùå Web build failed${NC}"
    exit 1
fi

# Package web distribution
echo -e "${BLUE}üì¶ Packaging web distribution...${NC}"
cd dist
tar -czf "../releases/gizli-web-${DATE}.tar.gz" .
cd ..
echo -e "${GREEN}‚úÖ Web package created: releases/gizli-web-${DATE}.tar.gz${NC}"

# Build Android
echo -e "${BLUE}üì± Building Android...${NC}"
npm run build:android

# Check if Android build was successful and copy APK
if [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
    cp android/app/build/outputs/apk/release/app-release.apk "releases/gizli-android-${DATE}.apk"
    echo -e "${GREEN}‚úÖ Android APK created: releases/gizli-android-${DATE}.apk${NC}"
    
    # Create symlink for telegram bot
    ln -sf "gizli-android-${DATE}.apk" "releases/gizli-android.apk"
    
    # Generate APK hash
    APK_HASH=$(sha256sum "releases/gizli-android-${DATE}.apk" | cut -d' ' -f1)
    echo -e "${BLUE}üîê Android APK SHA256: ${APK_HASH}${NC}"
    echo "${APK_HASH}" > "releases/gizli-android-${DATE}.apk.sha256"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Android APK not found. Build may have failed or you need to build manually in Android Studio.${NC}"
fi

# Build iOS (only on macOS)
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo -e "${BLUE}üçé Building iOS...${NC}"
    npm run build:ios
    echo -e "${YELLOW}üì± iOS build prepared. Open Xcode to complete: npx cap open ios${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  iOS build skipped (requires macOS)${NC}"
fi

# Create distribution info file
echo -e "${BLUE}üìÑ Creating distribution info...${NC}"
cat > "releases/DISTRIBUTION_INFO_${DATE}.md" << EOF
# Gizli Distribution Package - ${DATE}

## Version Information
- **Version**: ${VERSION}
- **Build Date**: $(date)
- **Git Commit**: $(git rev-parse --short HEAD 2>/dev/null || echo "N/A")

## Package Contents

### Android
- **File**: gizli-android-${DATE}.apk
- **Size**: $(ls -lh releases/gizli-android-${DATE}.apk 2>/dev/null | awk '{print $5}' || echo "N/A")
- **SHA256**: ${APK_HASH:-"N/A"}

### Web Application
- **File**: gizli-web-${DATE}.tar.gz
- **Size**: $(ls -lh releases/gizli-web-${DATE}.tar.gz 2>/dev/null | awk '{print $5}' || echo "N/A")

### iOS
- Build prepared for Xcode
- Run: \`npx cap open ios\` to complete build

## Installation Instructions

### Android
1. Enable "Install from unknown sources" in Android Settings
2. Download and install the APK file
3. Launch Gizli and generate your encryption keys

### iOS
1. **App Store**: Coming soon
2. **TestFlight**: Request beta access
3. **Web App**: Visit the web application URL and "Add to Home Screen"

### Web
1. Extract gizli-web-${DATE}.tar.gz to your web server
2. Configure HTTPS and security headers
3. Access via web browser

## Security Verification
- Verify APK hash: \`sha256sum gizli-android-${DATE}.apk\`
- Expected hash: ${APK_HASH:-"N/A"}

## Distribution Channels
- Direct download from website
- Telegram bot distribution
- GitHub releases
- F-Droid (planned)

---
Generated by Gizli distribution script
EOF

# Summary
echo -e "\n${GREEN}üéâ Distribution build completed!${NC}"
echo -e "${BLUE}üì¶ Files created in releases/ directory:${NC}"
ls -la releases/ | grep "${DATE}"

echo -e "\n${BLUE}üìä Distribution Summary:${NC}"
echo -e "üì± Android APK: ${GREEN}$([ -f "releases/gizli-android-${DATE}.apk" ] && echo "‚úÖ Ready" || echo "‚ùå Failed")${NC}"
echo -e "üåê Web Package: ${GREEN}$([ -f "releases/gizli-web-${DATE}.tar.gz" ] && echo "‚úÖ Ready" || echo "‚ùå Failed")${NC}"
echo -e "üçé iOS Build: ${YELLOW}$([ "$OSTYPE" == "darwin"* ] && echo "‚ö†Ô∏è  Manual completion required" || echo "‚ö†Ô∏è  Requires macOS")${NC}"

echo -e "\n${BLUE}üöÄ Next Steps:${NC}"
echo -e "1. Test the APK on Android device"
echo -e "2. Deploy web package to your server"
echo -e "3. Update Telegram bot with new files"
echo -e "4. Complete iOS build in Xcode (if on macOS)"
echo -e "5. Update version numbers and changelogs"

echo -e "\n${BLUE}ü§ñ Telegram Bot:${NC}"
echo -e "Run: ${YELLOW}npm run telegram-bot${NC} to start distribution bot"

echo -e "\n${GREEN}‚ú® Distribution ready for deployment!${NC}"
